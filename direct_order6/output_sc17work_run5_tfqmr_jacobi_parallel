Must indicate log file name with -logfile optionHash: nohash
tfqmr | jacobi | reason=2 | time=1.637816e-02 | norm=0.00162429 | its=6
KSP Object: 4 MPI processes
  type: tfqmr
  maximum iterations=10000, initial guess is zero
  tolerances:  relative=1e-05, absolute=1e-50, divergence=10000.
  left preconditioning
  using PRECONDITIONED norm type for convergence test
PC Object: 4 MPI processes
  type: jacobi
  linear system matrix = precond matrix:
  Mat Object: 4 MPI processes
    type: mpiaij
    rows=20002, cols=20002
    total: nonzeros=120004, allocated nonzeros=120004
    total number of mallocs used during MatSetValues calls =0
      using I-node (on process 0) routines: found 2501 nodes, limit used is 5
PC Object: 4 MPI processes
  type: jacobi
  linear system matrix = precond matrix:
  Mat Object: 4 MPI processes
    type: mpiaij
    rows=20002, cols=20002
    total: nonzeros=120004, allocated nonzeros=120004
    total number of mallocs used during MatSetValues calls =0
      using I-node (on process 0) routines: found 2501 nodes, limit used is 5
************************************************************************************************************************
***             WIDEN YOUR WINDOW TO 120 CHARACTERS.  Use 'enscript -r -fCourier9' to print this document            ***
************************************************************************************************************************

---------------------------------------------- PETSc Performance Summary: ----------------------------------------------



      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


./parallel on a arch-linux2-c-tau named arya with 4 processors, by kanikas Tue Mar 28 22:35:30 2017
Using Petsc Development GIT revision: v3.7.5-3275-g86807ec  GIT Date: 2017-03-09 18:20:42 -0600

                         Max       Max/Min        Avg      Total 
Time (sec):           1.399e-01      1.00072   1.398e-01
Objects:              2.600e+01      1.00000   2.600e+01
Flop:                 1.500e+06      1.00027   1.500e+06  6.000e+06
Flop/sec:            1.074e+07      1.00079   1.073e+07  4.292e+07
Memory:               1.165e+06      1.00058              4.658e+06
MPI Messages:         3.150e+01      1.90909   2.475e+01  9.900e+01
MPI Message Lengths:  5.703e+05      2.99871   1.153e+04  1.142e+06
MPI Reductions:       1.710e+02      1.00000

Flop counting convention: 1 flop = 1 real number operation of type (multiply/divide/add/subtract)
                            e.g., VecAXPY() for real vectors of length N --> 2N flop
                            and VecAXPY() for complex vectors of length N --> 8N flop

Summary of Stages:   ----- Time ------  ----- Flop -----  --- Messages ---  -- Message Lengths --  -- Reductions --
                        Avg     %Total     Avg     %Total   counts   %Total     Avg         %Total   counts   %Total 
 0:      Main Stage: 1.3949e-01  99.8%  6.0003e+06 100.0%  9.900e+01 100.0%  1.153e+04      100.0%  1.690e+02  98.8% 

------------------------------------------------------------------------------------------------------------------------
See the 'Profiling' chapter of the users' manual for details on interpreting output.
Phase summary info:
   Count: number of times phase was executed
   Time and Flop: Max - maximum over all processors
                   Ratio - ratio of maximum to minimum over all processors
   Mess: number of messages sent
   Avg. len: average message length (bytes)
   Reduct: number of global reductions
   Global: entire computation
   Stage: stages of a computation. Set stages with PetscLogStagePush() and PetscLogStagePop().
      %T - percent time in this phase         %F - percent flop in this phase
      %M - percent messages in this phase     %L - percent message lengths in this phase
      %R - percent reductions in this phase
   Total Mflop/s: 10e-6 * (sum of flop over all processors)/(max time over all processors)
------------------------------------------------------------------------------------------------------------------------


      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


Event                Count      Time (sec)     Flop                             --- Global ---  --- Stage ---   Total
                   Max Ratio  Max     Ratio   Max  Ratio  Mess   Avg len Reduct  %T %F %M %L %R  %T %F %M %L %R Mflop/s
------------------------------------------------------------------------------------------------------------------------

--- Event Stage 0: Main Stage

MatMult               13 1.0 3.7405e-03 1.2 7.15e+05 1.0 7.8e+01 1.9e+01 0.0e+00  3 48 79  0  0   3 48 79  0  0   765
MatAssemblyBegin       1 1.0 6.0203e-03 6.3 0.00e+00 0.0 0.0e+00 0.0e+00 4.0e+00  2  0  0  0  2   2  0  0  0  2     0
MatAssemblyEnd         1 1.0 3.1106e-02 1.0 0.00e+00 0.0 1.2e+01 6.7e+00 2.3e+01 22  0 12  0 13  22  0 12  0 14     0
MatLoad                1 1.0 5.8380e-02 1.0 0.00e+00 0.0 2.1e+01 5.4e+04 3.8e+01 42  0 21100 22  42  0 21100 22     0
MatView                2 1.0 1.4532e-03 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 4.0e+00  1  0  0  0  2   1  0  0  0  2     0
VecDot                12 1.0 1.6608e-03 1.4 1.20e+05 1.0 0.0e+00 0.0e+00 2.4e+01  1  8  0  0 14   1  8  0  0 14   289
VecNorm                8 1.0 9.6369e-04 1.5 8.00e+04 1.0 0.0e+00 0.0e+00 1.6e+01  1  5  0  0  9   1  5  0  0  9   332
VecCopy                5 1.0 3.2330e-04 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecSet                 5 1.0 7.9322e-04 1.4 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  1  0  0  0  0   1  0  0  0  0     0
VecAXPY               23 1.0 9.7656e-04 1.2 2.30e+05 1.0 0.0e+00 0.0e+00 0.0e+00  1 15  0  0  0   1 15  0  0  0   942
VecAYPX               11 1.0 3.2663e-04 1.3 1.00e+05 1.0 0.0e+00 0.0e+00 0.0e+00  0  7  0  0  0   0  7  0  0  0  1225
VecWAXPY              22 1.0 7.3051e-04 1.2 1.90e+05 1.0 0.0e+00 0.0e+00 0.0e+00  0 13  0  0  0   0 13  0  0  0  1040
VecPointwiseMult      13 1.0 4.4680e-04 1.2 6.50e+04 1.0 0.0e+00 0.0e+00 0.0e+00  0  4  0  0  0   0  4  0  0  0   582
VecScatterBegin       13 1.0 7.6222e-04 1.2 0.00e+00 0.0 7.8e+01 1.9e+01 0.0e+00  0  0 79  0  0   0  0 79  0  0     0
VecScatterEnd         13 1.0 5.5242e-04 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
KSPSetUp               1 1.0 2.9922e-03 1.4 0.00e+00 0.0 0.0e+00 0.0e+00 5.0e+00  2  0  0  0  3   2  0  0  0  3     0
KSPSolve               1 1.0 1.5191e-02 1.0 1.43e+06 1.0 7.2e+01 1.9e+01 1.0e+02 11 95 73  0 59  11 95 73  0 60   375
PCSetUp                1 1.0 3.7193e-05 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
PCApply               13 1.0 2.7452e-03 1.1 6.50e+04 1.0 0.0e+00 0.0e+00 6.0e+00  2  4  0  0  4   2  4  0  0  4    95
------------------------------------------------------------------------------------------------------------------------

Memory usage is given in bytes:

Object Type          Creations   Destructions     Memory  Descendants' Mem.
Reports information only for process 0.

--- Event Stage 0: Main Stage

              Viewer     2              1          816     0.
              Matrix     3              0            0     0.
              Vector    16              2        43304     0.
      Vector Scatter     1              0            0     0.
           Index Set     2              2         1580     0.
       Krylov Solver     1              0            0     0.
      Preconditioner     1              0            0     0.
========================================================================================================================
Average time to get PetscTime(): 6.67572e-07
Average time for MPI_Barrier(): 2.3365e-06
Average time for zero size MPI_Send(): 2.95043e-05
#PETSc Option Table entries:
-f /home/users/kanikas/MyProjects/PerfomanceModeling/direct_order6_test_60_6_1.mat
-ksp_type tfqmr
-log_summary
-pc_type jacobi
#End of PETSc Option Table entries
Compiled without FORTRAN kernels
Compiled with full precision matrices (default)
sizeof(short) 2 sizeof(int) 4 sizeof(long) 8 sizeof(void*) 8 sizeof(PetscScalar) 8 sizeof(PetscInt) 4
Configure options: --download-cblaslapack=1 --with-ssl=0 --with-debugging=yes --with-pic=1 --with-shared-libraries=1 CFLAGS="-fPIC -fopenmp -O3 -g" CXXFLAGS="-fPIC -fopenmp -O3 -g" --with-mpi-dir=/usr/local/packages/mpich/3.2/gcc-4.9 --with-fc=0 --with-prefetch=0
-----------------------------------------
Libraries compiled on Sat Mar 11 18:20:27 2017 on arya 
Machine characteristics: Linux-4.4.0-22-generic-x86_64-with-debian-stretch-sid
Using PETSc directory: /disks/large/shared/soft/petsc-git
Using PETSc arch: arch-linux2-c-tau
-----------------------------------------

Using C compiler: /usr/local/packages/mpich/3.2/gcc-4.9/bin/mpicc -fPIC -fopenmp -O3 -g    ${COPTFLAGS} ${CFLAGS}
-----------------------------------------

Using include paths: -I/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/include -I/disks/large/shared/soft/petsc-git/include -I/disks/large/shared/soft/petsc-git/include -I/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/include -I/usr/local/packages/mpich/3.2/gcc-4.9/include
-----------------------------------------

Using C linker: /usr/local/packages/mpich/3.2/gcc-4.9/bin/mpicc
Using libraries: -Wl,-rpath,/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/lib -L/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/lib -lpetsc -llapack -lblas -lX11 -lm -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -L/usr/local/packages/mpich/3.2/gcc-4.9/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/4.8 -L/usr/lib/gcc/x86_64-linux-gnu/4.8 -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -Wl,-rpath,/lib/x86_64-linux-gnu -L/lib/x86_64-linux-gnu -lmpicxx -lstdc++ -lm -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -L/usr/local/packages/mpich/3.2/gcc-4.9/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/4.8 -L/usr/lib/gcc/x86_64-linux-gnu/4.8 -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -Wl,-rpath,/lib/x86_64-linux-gnu -L/lib/x86_64-linux-gnu -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -ldl -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -lmpi -lgomp -lgcc_s -lpthread -ldl 
-----------------------------------------



      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################




 WARNING:   -log_summary is being deprecated; switch to -log_view


************************************************************************************************************************
***             WIDEN YOUR WINDOW TO 120 CHARACTERS.  Use 'enscript -r -fCourier9' to print this document            ***
************************************************************************************************************************

---------------------------------------------- PETSc Performance Summary: ----------------------------------------------



      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


./parallel on a arch-linux2-c-tau named arya with 4 processors, by kanikas Tue Mar 28 22:35:30 2017
Using Petsc Development GIT revision: v3.7.5-3275-g86807ec  GIT Date: 2017-03-09 18:20:42 -0600

                         Max       Max/Min        Avg      Total 
Time (sec):           1.572e-01      1.00999   1.563e-01
Objects:              2.600e+01      1.00000   2.600e+01
Flop:                 1.500e+06      1.00027   1.500e+06  6.000e+06
Flop/sec:            9.641e+06      1.01013   9.595e+06  3.838e+07
Memory:               1.165e+06      1.00058              4.658e+06
MPI Messages:         3.250e+01      1.85714   2.575e+01  1.030e+02
MPI Message Lengths:  5.703e+05      2.99871   1.108e+04  1.142e+06
MPI Reductions:       2.241e+03      1.00000

Flop counting convention: 1 flop = 1 real number operation of type (multiply/divide/add/subtract)
                            e.g., VecAXPY() for real vectors of length N --> 2N flop
                            and VecAXPY() for complex vectors of length N --> 8N flop

Summary of Stages:   ----- Time ------  ----- Flop -----  --- Messages ---  -- Message Lengths --  -- Reductions --
                        Avg     %Total     Avg     %Total   counts   %Total     Avg         %Total   counts   %Total 
 0:      Main Stage: 1.4562e-01  93.1%  6.0003e+06 100.0%  9.900e+01  96.1%  1.108e+04      100.0%  1.710e+02   7.6% 

------------------------------------------------------------------------------------------------------------------------
See the 'Profiling' chapter of the users' manual for details on interpreting output.
Phase summary info:
   Count: number of times phase was executed
   Time and Flop: Max - maximum over all processors
                   Ratio - ratio of maximum to minimum over all processors
   Mess: number of messages sent
   Avg. len: average message length (bytes)
   Reduct: number of global reductions
   Global: entire computation
   Stage: stages of a computation. Set stages with PetscLogStagePush() and PetscLogStagePop().
      %T - percent time in this phase         %F - percent flop in this phase
      %M - percent messages in this phase     %L - percent message lengths in this phase
      %R - percent reductions in this phase
   Total Mflop/s: 10e-6 * (sum of flop over all processors)/(max time over all processors)
------------------------------------------------------------------------------------------------------------------------


      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


Event                Count      Time (sec)     Flop                             --- Global ---  --- Stage ---   Total
                   Max Ratio  Max     Ratio   Max  Ratio  Mess   Avg len Reduct  %T %F %M %L %R  %T %F %M %L %R Mflop/s
------------------------------------------------------------------------------------------------------------------------

--- Event Stage 0: Main Stage

MatMult               13 1.0 3.7405e-03 1.2 7.15e+05 1.0 7.8e+01 1.9e+01 0.0e+00  2 48 76  0  0   2 48 79  0  0   765
MatAssemblyBegin       1 1.0 6.0203e-03 6.3 0.00e+00 0.0 0.0e+00 0.0e+00 4.0e+00  2  0  0  0  0   2  0  0  0  2     0
MatAssemblyEnd         1 1.0 3.1106e-02 1.0 0.00e+00 0.0 1.2e+01 6.7e+00 2.3e+01 20  0 12  0  1  21  0 12  0 13     0
MatLoad                1 1.0 5.8380e-02 1.0 0.00e+00 0.0 2.1e+01 5.4e+04 3.8e+01 37  0 20100  2  40  0 21100 22     0
MatView                2 1.0 1.4532e-03 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 4.0e+00  1  0  0  0  0   1  0  0  0  2     0
VecDot                12 1.0 1.6608e-03 1.4 1.20e+05 1.0 0.0e+00 0.0e+00 2.4e+01  1  8  0  0  1   1  8  0  0 14   289
VecNorm                8 1.0 9.6369e-04 1.5 8.00e+04 1.0 0.0e+00 0.0e+00 1.6e+01  0  5  0  0  1   0  5  0  0  9   332
VecCopy                5 1.0 3.2330e-04 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecSet                 5 1.0 7.9322e-04 1.4 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecAXPY               23 1.0 9.7656e-04 1.2 2.30e+05 1.0 0.0e+00 0.0e+00 0.0e+00  1 15  0  0  0   1 15  0  0  0   942
VecAYPX               11 1.0 3.2663e-04 1.3 1.00e+05 1.0 0.0e+00 0.0e+00 0.0e+00  0  7  0  0  0   0  7  0  0  0  1225
VecWAXPY              22 1.0 7.3051e-04 1.2 1.90e+05 1.0 0.0e+00 0.0e+00 0.0e+00  0 13  0  0  0   0 13  0  0  0  1040
VecPointwiseMult      13 1.0 4.4680e-04 1.2 6.50e+04 1.0 0.0e+00 0.0e+00 0.0e+00  0  4  0  0  0   0  4  0  0  0   582
VecScatterBegin       13 1.0 7.6222e-04 1.2 0.00e+00 0.0 7.8e+01 1.9e+01 0.0e+00  0  0 76  0  0   0  0 79  0  0     0
VecScatterEnd         13 1.0 5.5242e-04 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
KSPSetUp               1 1.0 2.9922e-03 1.4 0.00e+00 0.0 0.0e+00 0.0e+00 5.0e+00  2  0  0  0  0   2  0  0  0  3     0
KSPSolve               1 1.0 1.5191e-02 1.0 1.43e+06 1.0 7.2e+01 1.9e+01 1.0e+02 10 95 70  0  5  10 95 73  0 59   375
PCSetUp                1 1.0 3.7193e-05 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
PCApply               13 1.0 2.7452e-03 1.1 6.50e+04 1.0 0.0e+00 0.0e+00 6.0e+00  2  4  0  0  0   2  4  0  0  4    95
------------------------------------------------------------------------------------------------------------------------

Memory usage is given in bytes:

Object Type          Creations   Destructions     Memory  Descendants' Mem.
Reports information only for process 0.

--- Event Stage 0: Main Stage

              Viewer     2              1          816     0.
              Matrix     3              0            0     0.
              Vector    16             15       584832     0.
      Vector Scatter     1              0            0     0.
           Index Set     2              2         1580     0.
       Krylov Solver     1              1         1168     0.
      Preconditioner     1              1          848     0.
========================================================================================================================
Average time to get PetscTime(): 6.19888e-07
Average time for MPI_Barrier(): 3.76701e-06
Average time for zero size MPI_Send(): 7.33137e-06
#PETSc Option Table entries:
-f /home/users/kanikas/MyProjects/PerfomanceModeling/direct_order6_test_60_6_1.mat
-ksp_type tfqmr
-log_summary
-pc_type jacobi
#End of PETSc Option Table entries
Compiled without FORTRAN kernels
Compiled with full precision matrices (default)
sizeof(short) 2 sizeof(int) 4 sizeof(long) 8 sizeof(void*) 8 sizeof(PetscScalar) 8 sizeof(PetscInt) 4
Configure options: --download-cblaslapack=1 --with-ssl=0 --with-debugging=yes --with-pic=1 --with-shared-libraries=1 CFLAGS="-fPIC -fopenmp -O3 -g" CXXFLAGS="-fPIC -fopenmp -O3 -g" --with-mpi-dir=/usr/local/packages/mpich/3.2/gcc-4.9 --with-fc=0 --with-prefetch=0
-----------------------------------------
Libraries compiled on Sat Mar 11 18:20:27 2017 on arya 
Machine characteristics: Linux-4.4.0-22-generic-x86_64-with-debian-stretch-sid
Using PETSc directory: /disks/large/shared/soft/petsc-git
Using PETSc arch: arch-linux2-c-tau
-----------------------------------------

Using C compiler: /usr/local/packages/mpich/3.2/gcc-4.9/bin/mpicc -fPIC -fopenmp -O3 -g    ${COPTFLAGS} ${CFLAGS}
-----------------------------------------

Using include paths: -I/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/include -I/disks/large/shared/soft/petsc-git/include -I/disks/large/shared/soft/petsc-git/include -I/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/include -I/usr/local/packages/mpich/3.2/gcc-4.9/include
-----------------------------------------

Using C linker: /usr/local/packages/mpich/3.2/gcc-4.9/bin/mpicc
Using libraries: -Wl,-rpath,/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/lib -L/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/lib -lpetsc -llapack -lblas -lX11 -lm -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -L/usr/local/packages/mpich/3.2/gcc-4.9/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/4.8 -L/usr/lib/gcc/x86_64-linux-gnu/4.8 -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -Wl,-rpath,/lib/x86_64-linux-gnu -L/lib/x86_64-linux-gnu -lmpicxx -lstdc++ -lm -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -L/usr/local/packages/mpich/3.2/gcc-4.9/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/4.8 -L/usr/lib/gcc/x86_64-linux-gnu/4.8 -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -Wl,-rpath,/lib/x86_64-linux-gnu -L/lib/x86_64-linux-gnu -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -ldl -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -lmpi -lgomp -lgcc_s -lpthread -ldl 
-----------------------------------------



      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


