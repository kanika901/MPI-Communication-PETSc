Must indicate log file name with -logfile optionHash: nohash
fgmres | asm | reason=2 | time=1.214552e-02 | norm=5.38033e-05 | its=2
KSP Object: 4 MPI processes
  type: fgmres
    GMRES: restart=30, using Classical (unmodified) Gram-Schmidt Orthogonalization with no iterative refinement
    GMRES: happy breakdown tolerance 1e-30
  maximum iterations=10000, initial guess is zero
  tolerances:  relative=1e-05, absolute=1e-50, divergence=10000.
  right preconditioning
  using UNPRECONDITIONED norm type for convergence test
PC Object: 4 MPI processes
  type: asm
    Additive Schwarz: total subdomain blocks = 4, amount of overlap = 1
    Additive Schwarz: restriction/interpolation type - RESTRICT
    Local solve is same for all blocks, in the following KSP and PC objects:
  KSP Object: (sub_) 1 MPI processes
    type: preonly
    maximum iterations=10000, initial guess is zero
    tolerances:  relative=1e-05, absolute=1e-50, divergence=10000.
    left preconditioning
    using NONE norm type for convergence test
  PC Object: (sub_) 1 MPI processes
    type: ilu
      out-of-place factorization
      0 levels of fill
      tolerance for zero pivot 2.22045e-14
      matrix ordering: natural
      factor fill ratio given 1., needed 1.
        Factored matrix follows:
          Mat Object: 1 MPI processes
            type: seqaij
            rows=5004, cols=5004
            package used to perform factorization: petsc
            total: nonzeros=30016, allocated nonzeros=30016
            total number of mallocs used during MatSetValues calls =0
              using I-node routines: found 2502 nodes, limit used is 5
    linear system matrix = precond matrix:
    Mat Object: 1 MPI processes
      type: seqaij
      rows=5004, cols=5004
      total: nonzeros=30016, allocated nonzeros=30016
      total number of mallocs used during MatSetValues calls =0
        using I-node routines: found 2502 nodes, limit used is 5
  linear system matrix = precond matrix:
  Mat Object: 4 MPI processes
    type: mpiaij
    rows=20002, cols=20002
    total: nonzeros=120004, allocated nonzeros=120004
    total number of mallocs used during MatSetValues calls =0
      using I-node (on process 0) routines: found 2501 nodes, limit used is 5
PC Object: 4 MPI processes
  type: asm
    Additive Schwarz: total subdomain blocks = 4, amount of overlap = 1
    Additive Schwarz: restriction/interpolation type - RESTRICT
    Local solve is same for all blocks, in the following KSP and PC objects:
  KSP Object: (sub_) 1 MPI processes
    type: preonly
    maximum iterations=10000, initial guess is zero
    tolerances:  relative=1e-05, absolute=1e-50, divergence=10000.
    left preconditioning
    using NONE norm type for convergence test
  PC Object: (sub_) 1 MPI processes
    type: ilu
      out-of-place factorization
      0 levels of fill
      tolerance for zero pivot 2.22045e-14
      matrix ordering: natural
      factor fill ratio given 1., needed 1.
        Factored matrix follows:
          Mat Object: 1 MPI processes
            type: seqaij
            rows=5004, cols=5004
            package used to perform factorization: petsc
            total: nonzeros=30016, allocated nonzeros=30016
            total number of mallocs used during MatSetValues calls =0
              using I-node routines: found 2502 nodes, limit used is 5
    linear system matrix = precond matrix:
    Mat Object: 1 MPI processes
      type: seqaij
      rows=5004, cols=5004
      total: nonzeros=30016, allocated nonzeros=30016
      total number of mallocs used during MatSetValues calls =0
        using I-node routines: found 2502 nodes, limit used is 5
  linear system matrix = precond matrix:
  Mat Object: 4 MPI processes
    type: mpiaij
    rows=20002, cols=20002
    total: nonzeros=120004, allocated nonzeros=120004
    total number of mallocs used during MatSetValues calls =0
      using I-node (on process 0) routines: found 2501 nodes, limit used is 5
************************************************************************************************************************
***             WIDEN YOUR WINDOW TO 120 CHARACTERS.  Use 'enscript -r -fCourier9' to print this document            ***
************************************************************************************************************************

---------------------------------------------- PETSc Performance Summary: ----------------------------------------------



      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


./parallel on a arch-linux2-c-tau named arya with 4 processors, by kanikas Tue Mar 28 17:37:27 2017
Using Petsc Development GIT revision: v3.7.5-3275-g86807ec  GIT Date: 2017-03-09 18:20:42 -0600

                         Max       Max/Min        Avg      Total 
Time (sec):           2.647e-01      1.00025   2.647e-01
Objects:              4.300e+01      1.00000   4.300e+01
Flop:                 5.027e+05      1.00048   5.026e+05  2.010e+06
Flop/sec:            1.900e+06      1.00049   1.899e+06  7.596e+06
Memory:               2.782e+06      1.03054              1.088e+07
MPI Messages:         2.950e+01      1.90323   2.325e+01  9.300e+01
MPI Message Lengths:  5.704e+05      2.99806   1.228e+04  1.142e+06
MPI Reductions:       1.170e+02      1.00000

Flop counting convention: 1 flop = 1 real number operation of type (multiply/divide/add/subtract)
                            e.g., VecAXPY() for real vectors of length N --> 2N flop
                            and VecAXPY() for complex vectors of length N --> 8N flop

Summary of Stages:   ----- Time ------  ----- Flop -----  --- Messages ---  -- Message Lengths --  -- Reductions --
                        Avg     %Total     Avg     %Total   counts   %Total     Avg         %Total   counts   %Total 
 0:      Main Stage: 2.6436e-01  99.9%  2.0104e+06 100.0%  9.300e+01 100.0%  1.228e+04      100.0%  1.150e+02  98.3% 

------------------------------------------------------------------------------------------------------------------------
See the 'Profiling' chapter of the users' manual for details on interpreting output.
Phase summary info:
   Count: number of times phase was executed
   Time and Flop: Max - maximum over all processors
                   Ratio - ratio of maximum to minimum over all processors
   Mess: number of messages sent
   Avg. len: average message length (bytes)
   Reduct: number of global reductions
   Global: entire computation
   Stage: stages of a computation. Set stages with PetscLogStagePush() and PetscLogStagePop().
      %T - percent time in this phase         %F - percent flop in this phase
      %M - percent messages in this phase     %L - percent message lengths in this phase
      %R - percent reductions in this phase
   Total Mflop/s: 10e-6 * (sum of flop over all processors)/(max time over all processors)
------------------------------------------------------------------------------------------------------------------------


      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


Event                Count      Time (sec)     Flop                             --- Global ---  --- Stage ---   Total
                   Max Ratio  Max     Ratio   Max  Ratio  Mess   Avg len Reduct  %T %F %M %L %R  %T %F %M %L %R Mflop/s
------------------------------------------------------------------------------------------------------------------------

--- Event Stage 0: Main Stage

MatMult                3 1.0 1.2643e-03 1.0 1.65e+05 1.0 1.8e+01 1.9e+01 0.0e+00  0 33 19  0  0   0 33 19  0  0   522
MatSolve               2 1.0 2.9564e-04 1.0 1.10e+05 1.0 0.0e+00 0.0e+00 0.0e+00  0 22  0  0  0   0 22  0  0  0  1489
MatLUFactorNum         1 1.0 2.9943e-02 1.0 8.26e+04 1.0 0.0e+00 0.0e+00 0.0e+00 11 16  0  0  0  11 16  0  0  0    11
MatILUFactorSym        1 1.0 9.2061e-03 1.0 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  3  0  0  0  0   3  0  0  0  0     0
MatAssemblyBegin       2 1.0 5.9903e-03 6.8 0.00e+00 0.0 0.0e+00 0.0e+00 4.0e+00  1  0  0  0  3   1  0  0  0  3     0
MatAssemblyEnd         2 1.0 3.2615e-02 1.0 0.00e+00 0.0 1.2e+01 6.7e+00 2.3e+01 12  0 13  0 20  12  0 13  0 20     0
MatGetRowIJ            1 1.0 2.1124e-04 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
MatCreateSubMats       1 1.0 1.4285e-02 1.4 0.00e+00 0.0 3.0e+01 4.3e+01 2.0e+00  4  0 32  0  2   4  0 32  0  2     0
MatGetOrdering         1 1.0 1.6842e-02 1.0 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  6  0  0  0  0   6  0  0  0  0     0
MatIncreaseOvrlp       1 1.0 5.1477e-02 1.0 0.00e+00 0.0 0.0e+00 0.0e+00 2.0e+00 19  0  0  0  2  19  0  0  0  2     0
MatLoad                1 1.0 5.2064e-02 1.0 0.00e+00 0.0 2.1e+01 5.4e+04 3.8e+01 20  0 23100 32  20  0 23100 33     0
MatView                6 3.0 3.0508e-03 1.9 0.00e+00 0.0 0.0e+00 0.0e+00 4.0e+00  1  0  0  0  3   1  0  0  0  3     0
VecMDot                2 1.0 2.0306e-03 4.2 3.00e+04 1.0 0.0e+00 0.0e+00 4.0e+00  0  6  0  0  3   0  6  0  0  3    59
VecNorm                3 1.0 2.3508e-04 1.0 3.00e+04 1.0 0.0e+00 0.0e+00 6.0e+00  0  6  0  0  5   0  6  0  0  5   511
VecScale               3 1.0 5.9223e-04 1.1 1.50e+04 1.0 0.0e+00 0.0e+00 0.0e+00  0  3  0  0  0   0  3  0  0  0   101
VecCopy                1 1.0 2.0790e-04 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecSet                10 1.0 8.9455e-04 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecAXPY                2 1.0 1.5283e-04 1.0 2.00e+04 1.0 0.0e+00 0.0e+00 0.0e+00  0  4  0  0  0   0  4  0  0  0   524
VecMAXPY               3 1.0 1.2350e-04 1.1 5.00e+04 1.0 0.0e+00 0.0e+00 0.0e+00  0 10  0  0  0   0 10  0  0  0  1620
VecScatterBegin        7 1.0 7.9226e-04 1.1 0.00e+00 0.0 3.0e+01 1.9e+01 0.0e+00  0  0 32  0  0   0  0 32  0  0     0
VecScatterEnd          7 1.0 3.5858e-04 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
KSPGMRESOrthog         2 1.0 2.3859e-03 1.1 6.00e+04 1.0 0.0e+00 0.0e+00 7.0e+00  1 12  0  0  6   1 12  0  0  6   101
KSPSetUp               2 1.0 2.5578e-03 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 1.0e+01  1  0  0  0  9   1  0  0  0  9     0
KSPSolve               1 1.0 1.0881e-02 1.1 3.45e+05 1.0 2.4e+01 1.9e+01 1.8e+01  4 69 26  0 15   4 69 26  0 16   127
PCSetUp                2 1.0 1.3206e-01 1.0 8.26e+04 1.0 4.2e+01 3.3e+01 2.4e+01 50 16 45  0 21  50 16 45  0 21     2
PCSetUpOnBlocks        2 1.0 6.0268e-02 1.0 8.26e+04 1.0 0.0e+00 0.0e+00 0.0e+00 23 16  0  0  0  23 16  0  0  0     5
PCApply                2 1.0 3.1295e-03 1.0 1.10e+05 1.0 1.2e+01 1.9e+01 2.0e+00  1 22 13  0  2   1 22 13  0  2   141
------------------------------------------------------------------------------------------------------------------------

Memory usage is given in bytes:

Object Type          Creations   Destructions     Memory  Descendants' Mem.
Reports information only for process 0.

--- Event Stage 0: Main Stage

              Viewer     4              3         2480     0.
              Matrix     5              0            0     0.
              Vector    18              4       126616     0.
      Vector Scatter     2              0            0     0.
           Index Set    10              6        14724     0.
       Krylov Solver     2              0            0     0.
      Preconditioner     2              0            0     0.
========================================================================================================================
Average time to get PetscTime(): 6.19888e-07
Average time for MPI_Barrier(): 3.29018e-06
Average time for zero size MPI_Send(): 3.34978e-05
#PETSc Option Table entries:
-f /home/users/kanikas/MyProjects/PerfomanceModeling/direct_order6_test_60_6_1.mat
-ksp_type fgmres
-log_summary
-pc_type asm
#End of PETSc Option Table entries
Compiled without FORTRAN kernels
Compiled with full precision matrices (default)
sizeof(short) 2 sizeof(int) 4 sizeof(long) 8 sizeof(void*) 8 sizeof(PetscScalar) 8 sizeof(PetscInt) 4
Configure options: --download-cblaslapack=1 --with-ssl=0 --with-debugging=yes --with-pic=1 --with-shared-libraries=1 CFLAGS="-fPIC -fopenmp -O3 -g" CXXFLAGS="-fPIC -fopenmp -O3 -g" --with-mpi-dir=/usr/local/packages/mpich/3.2/gcc-4.9 --with-fc=0 --with-prefetch=0
-----------------------------------------
Libraries compiled on Sat Mar 11 18:20:27 2017 on arya 
Machine characteristics: Linux-4.4.0-22-generic-x86_64-with-debian-stretch-sid
Using PETSc directory: /disks/large/shared/soft/petsc-git
Using PETSc arch: arch-linux2-c-tau
-----------------------------------------

Using C compiler: /usr/local/packages/mpich/3.2/gcc-4.9/bin/mpicc -fPIC -fopenmp -O3 -g    ${COPTFLAGS} ${CFLAGS}
-----------------------------------------

Using include paths: -I/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/include -I/disks/large/shared/soft/petsc-git/include -I/disks/large/shared/soft/petsc-git/include -I/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/include -I/usr/local/packages/mpich/3.2/gcc-4.9/include
-----------------------------------------

Using C linker: /usr/local/packages/mpich/3.2/gcc-4.9/bin/mpicc
Using libraries: -Wl,-rpath,/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/lib -L/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/lib -lpetsc -llapack -lblas -lX11 -lm -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -L/usr/local/packages/mpich/3.2/gcc-4.9/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/4.8 -L/usr/lib/gcc/x86_64-linux-gnu/4.8 -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -Wl,-rpath,/lib/x86_64-linux-gnu -L/lib/x86_64-linux-gnu -lmpicxx -lstdc++ -lm -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -L/usr/local/packages/mpich/3.2/gcc-4.9/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/4.8 -L/usr/lib/gcc/x86_64-linux-gnu/4.8 -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -Wl,-rpath,/lib/x86_64-linux-gnu -L/lib/x86_64-linux-gnu -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -ldl -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -lmpi -lgomp -lgcc_s -lpthread -ldl 
-----------------------------------------



      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################




 WARNING:   -log_summary is being deprecated; switch to -log_view


************************************************************************************************************************
***             WIDEN YOUR WINDOW TO 120 CHARACTERS.  Use 'enscript -r -fCourier9' to print this document            ***
************************************************************************************************************************

---------------------------------------------- PETSc Performance Summary: ----------------------------------------------



      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


./parallel on a arch-linux2-c-tau named arya with 4 processors, by kanikas Tue Mar 28 17:37:27 2017
Using Petsc Development GIT revision: v3.7.5-3275-g86807ec  GIT Date: 2017-03-09 18:20:42 -0600

                         Max       Max/Min        Avg      Total 
Time (sec):           2.837e-01      1.00008   2.837e-01
Objects:              4.300e+01      1.00000   4.300e+01
Flop:                 5.027e+05      1.00048   5.026e+05  2.010e+06
Flop/sec:            1.772e+06      1.00046   1.772e+06  7.086e+06
Memory:               2.782e+06      1.03054              1.088e+07
MPI Messages:         3.150e+01      1.80000   2.575e+01  1.030e+02
MPI Message Lengths:  5.704e+05      2.99806   1.109e+04  1.142e+06
MPI Reductions:       2.187e+03      1.00000

Flop counting convention: 1 flop = 1 real number operation of type (multiply/divide/add/subtract)
                            e.g., VecAXPY() for real vectors of length N --> 2N flop
                            and VecAXPY() for complex vectors of length N --> 8N flop

Summary of Stages:   ----- Time ------  ----- Flop -----  --- Messages ---  -- Message Lengths --  -- Reductions --
                        Avg     %Total     Avg     %Total   counts   %Total     Avg         %Total   counts   %Total 
 0:      Main Stage: 2.7205e-01  95.9%  2.0104e+06 100.0%  9.900e+01  96.1%  1.109e+04      100.0%  1.170e+02   5.3% 

------------------------------------------------------------------------------------------------------------------------
See the 'Profiling' chapter of the users' manual for details on interpreting output.
Phase summary info:
   Count: number of times phase was executed
   Time and Flop: Max - maximum over all processors
                   Ratio - ratio of maximum to minimum over all processors
   Mess: number of messages sent
   Avg. len: average message length (bytes)
   Reduct: number of global reductions
   Global: entire computation
   Stage: stages of a computation. Set stages with PetscLogStagePush() and PetscLogStagePop().
      %T - percent time in this phase         %F - percent flop in this phase
      %M - percent messages in this phase     %L - percent message lengths in this phase
      %R - percent reductions in this phase
   Total Mflop/s: 10e-6 * (sum of flop over all processors)/(max time over all processors)
------------------------------------------------------------------------------------------------------------------------


      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


Event                Count      Time (sec)     Flop                             --- Global ---  --- Stage ---   Total
                   Max Ratio  Max     Ratio   Max  Ratio  Mess   Avg len Reduct  %T %F %M %L %R  %T %F %M %L %R Mflop/s
------------------------------------------------------------------------------------------------------------------------

--- Event Stage 0: Main Stage

MatMult                3 1.0 1.2643e-03 1.0 1.65e+05 1.0 1.8e+01 1.9e+01 0.0e+00  0 33 17  0  0   0 33 18  0  0   522
MatSolve               2 1.0 2.9564e-04 1.0 1.10e+05 1.0 0.0e+00 0.0e+00 0.0e+00  0 22  0  0  0   0 22  0  0  0  1489
MatLUFactorNum         1 1.0 2.9943e-02 1.0 8.26e+04 1.0 0.0e+00 0.0e+00 0.0e+00 10 16  0  0  0  11 16  0  0  0    11
MatILUFactorSym        1 1.0 9.2061e-03 1.0 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  3  0  0  0  0   3  0  0  0  0     0
MatAssemblyBegin       2 1.0 5.9903e-03 6.8 0.00e+00 0.0 0.0e+00 0.0e+00 4.0e+00  1  0  0  0  0   1  0  0  0  3     0
MatAssemblyEnd         2 1.0 3.2615e-02 1.0 0.00e+00 0.0 1.2e+01 6.7e+00 2.3e+01 11  0 12  0  1  12  0 12  0 20     0
MatGetRowIJ            1 1.0 2.1124e-04 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
MatCreateSubMats       1 1.0 1.4285e-02 1.4 0.00e+00 0.0 3.0e+01 4.3e+01 2.0e+00  4  0 29  0  0   4  0 30  0  2     0
MatGetOrdering         1 1.0 1.6842e-02 1.0 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  6  0  0  0  0   6  0  0  0  0     0
MatIncreaseOvrlp       1 1.0 5.1477e-02 1.0 0.00e+00 0.0 0.0e+00 0.0e+00 2.0e+00 18  0  0  0  0  19  0  0  0  2     0
MatLoad                1 1.0 5.2064e-02 1.0 0.00e+00 0.0 2.1e+01 5.4e+04 3.8e+01 18  0 20100  2  19  0 21100 32     0
MatView                6 3.0 3.0508e-03 1.9 0.00e+00 0.0 0.0e+00 0.0e+00 4.0e+00  1  0  0  0  0   1  0  0  0  3     0
VecMDot                2 1.0 2.0306e-03 4.2 3.00e+04 1.0 0.0e+00 0.0e+00 4.0e+00  0  6  0  0  0   0  6  0  0  3    59
VecNorm                3 1.0 2.3508e-04 1.0 3.00e+04 1.0 0.0e+00 0.0e+00 6.0e+00  0  6  0  0  0   0  6  0  0  5   511
VecScale               3 1.0 5.9223e-04 1.1 1.50e+04 1.0 0.0e+00 0.0e+00 0.0e+00  0  3  0  0  0   0  3  0  0  0   101
VecCopy                1 1.0 2.0790e-04 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecSet                10 1.0 8.9455e-04 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecAXPY                2 1.0 1.5283e-04 1.0 2.00e+04 1.0 0.0e+00 0.0e+00 0.0e+00  0  4  0  0  0   0  4  0  0  0   524
VecMAXPY               3 1.0 1.2350e-04 1.1 5.00e+04 1.0 0.0e+00 0.0e+00 0.0e+00  0 10  0  0  0   0 10  0  0  0  1620
VecScatterBegin        7 1.0 7.9226e-04 1.1 0.00e+00 0.0 3.0e+01 1.9e+01 0.0e+00  0  0 29  0  0   0  0 30  0  0     0
VecScatterEnd          7 1.0 3.5858e-04 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
KSPGMRESOrthog         2 1.0 2.3859e-03 1.1 6.00e+04 1.0 0.0e+00 0.0e+00 7.0e+00  1 12  0  0  0   1 12  0  0  6   101
KSPSetUp               2 1.0 2.5578e-03 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 1.0e+01  1  0  0  0  0   1  0  0  0  9     0
KSPSolve               1 1.0 1.0881e-02 1.1 3.45e+05 1.0 2.4e+01 1.9e+01 1.8e+01  4 69 23  0  1   4 69 24  0 15   127
PCSetUp                2 1.0 1.3206e-01 1.0 8.26e+04 1.0 4.2e+01 3.3e+01 2.4e+01 46 16 41  0  1  48 16 42  0 21     2
PCSetUpOnBlocks        2 1.0 6.0268e-02 1.0 8.26e+04 1.0 0.0e+00 0.0e+00 0.0e+00 21 16  0  0  0  22 16  0  0  0     5
PCApply                2 1.0 3.1295e-03 1.0 1.10e+05 1.0 1.2e+01 1.9e+01 2.0e+00  1 22 12  0  0   1 22 12  0  2   141
------------------------------------------------------------------------------------------------------------------------

Memory usage is given in bytes:

Object Type          Creations   Destructions     Memory  Descendants' Mem.
Reports information only for process 0.

--- Event Stage 0: Main Stage

              Viewer     4              3         2480     0.
              Matrix     5              2       886812     0.
              Vector    18             17       667952     0.
      Vector Scatter     2              1        41080     0.
           Index Set    10             10        97924     0.
       Krylov Solver     2              2        20128     0.
      Preconditioner     2              2         1984     0.
========================================================================================================================
Average time to get PetscTime(): 6.19888e-07
Average time for MPI_Barrier(): 3.19481e-06
Average time for zero size MPI_Send(): 7.689e-06
#PETSc Option Table entries:
-f /home/users/kanikas/MyProjects/PerfomanceModeling/direct_order6_test_60_6_1.mat
-ksp_type fgmres
-log_summary
-pc_type asm
#End of PETSc Option Table entries
Compiled without FORTRAN kernels
Compiled with full precision matrices (default)
sizeof(short) 2 sizeof(int) 4 sizeof(long) 8 sizeof(void*) 8 sizeof(PetscScalar) 8 sizeof(PetscInt) 4
Configure options: --download-cblaslapack=1 --with-ssl=0 --with-debugging=yes --with-pic=1 --with-shared-libraries=1 CFLAGS="-fPIC -fopenmp -O3 -g" CXXFLAGS="-fPIC -fopenmp -O3 -g" --with-mpi-dir=/usr/local/packages/mpich/3.2/gcc-4.9 --with-fc=0 --with-prefetch=0
-----------------------------------------
Libraries compiled on Sat Mar 11 18:20:27 2017 on arya 
Machine characteristics: Linux-4.4.0-22-generic-x86_64-with-debian-stretch-sid
Using PETSc directory: /disks/large/shared/soft/petsc-git
Using PETSc arch: arch-linux2-c-tau
-----------------------------------------

Using C compiler: /usr/local/packages/mpich/3.2/gcc-4.9/bin/mpicc -fPIC -fopenmp -O3 -g    ${COPTFLAGS} ${CFLAGS}
-----------------------------------------

Using include paths: -I/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/include -I/disks/large/shared/soft/petsc-git/include -I/disks/large/shared/soft/petsc-git/include -I/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/include -I/usr/local/packages/mpich/3.2/gcc-4.9/include
-----------------------------------------

Using C linker: /usr/local/packages/mpich/3.2/gcc-4.9/bin/mpicc
Using libraries: -Wl,-rpath,/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/lib -L/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/lib -lpetsc -llapack -lblas -lX11 -lm -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -L/usr/local/packages/mpich/3.2/gcc-4.9/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/4.8 -L/usr/lib/gcc/x86_64-linux-gnu/4.8 -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -Wl,-rpath,/lib/x86_64-linux-gnu -L/lib/x86_64-linux-gnu -lmpicxx -lstdc++ -lm -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -L/usr/local/packages/mpich/3.2/gcc-4.9/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/4.8 -L/usr/lib/gcc/x86_64-linux-gnu/4.8 -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -Wl,-rpath,/lib/x86_64-linux-gnu -L/lib/x86_64-linux-gnu -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -ldl -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -lmpi -lgomp -lgcc_s -lpthread -ldl 
-----------------------------------------



      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


