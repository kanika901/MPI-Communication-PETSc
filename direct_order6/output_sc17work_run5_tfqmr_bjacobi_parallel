Must indicate log file name with -logfile optionHash: nohash
tfqmr | bjacobi | reason=2 | time=1.326561e-02 | norm=0.00124231 | its=2
KSP Object: 4 MPI processes
  type: tfqmr
  maximum iterations=10000, initial guess is zero
  tolerances:  relative=1e-05, absolute=1e-50, divergence=10000.
  left preconditioning
  using PRECONDITIONED norm type for convergence test
PC Object: 4 MPI processes
  type: bjacobi
    block Jacobi: number of blocks = 4
    Local solve is same for all blocks, in the following KSP and PC objects:
  KSP Object: (sub_) 1 MPI processes
    type: preonly
    maximum iterations=10000, initial guess is zero
    tolerances:  relative=1e-05, absolute=1e-50, divergence=10000.
    left preconditioning
    using NONE norm type for convergence test
  PC Object: (sub_) 1 MPI processes
    type: ilu
      out-of-place factorization
      0 levels of fill
      tolerance for zero pivot 2.22045e-14
      matrix ordering: natural
      factor fill ratio given 1., needed 1.
        Factored matrix follows:
          Mat Object: 1 MPI processes
            type: seqaij
            rows=5001, cols=5001
            package used to perform factorization: petsc
            total: nonzeros=29997, allocated nonzeros=29997
            total number of mallocs used during MatSetValues calls =0
              using I-node routines: found 2501 nodes, limit used is 5
    linear system matrix = precond matrix:
    Mat Object: 1 MPI processes
      type: seqaij
      rows=5001, cols=5001
      total: nonzeros=29997, allocated nonzeros=29997
      total number of mallocs used during MatSetValues calls =0
        using I-node routines: found 2501 nodes, limit used is 5
  linear system matrix = precond matrix:
  Mat Object: 4 MPI processes
    type: mpiaij
    rows=20002, cols=20002
    total: nonzeros=120004, allocated nonzeros=120004
    total number of mallocs used during MatSetValues calls =0
      using I-node (on process 0) routines: found 2501 nodes, limit used is 5
PC Object: 4 MPI processes
  type: bjacobi
    block Jacobi: number of blocks = 4
    Local solve is same for all blocks, in the following KSP and PC objects:
  KSP Object: (sub_) 1 MPI processes
    type: preonly
    maximum iterations=10000, initial guess is zero
    tolerances:  relative=1e-05, absolute=1e-50, divergence=10000.
    left preconditioning
    using NONE norm type for convergence test
  PC Object: (sub_) 1 MPI processes
    type: ilu
      out-of-place factorization
      0 levels of fill
      tolerance for zero pivot 2.22045e-14
      matrix ordering: natural
      factor fill ratio given 1., needed 1.
        Factored matrix follows:
          Mat Object: 1 MPI processes
            type: seqaij
            rows=5001, cols=5001
            package used to perform factorization: petsc
            total: nonzeros=29997, allocated nonzeros=29997
            total number of mallocs used during MatSetValues calls =0
              using I-node routines: found 2501 nodes, limit used is 5
    linear system matrix = precond matrix:
    Mat Object: 1 MPI processes
      type: seqaij
      rows=5001, cols=5001
      total: nonzeros=29997, allocated nonzeros=29997
      total number of mallocs used during MatSetValues calls =0
        using I-node routines: found 2501 nodes, limit used is 5
  linear system matrix = precond matrix:
  Mat Object: 4 MPI processes
    type: mpiaij
    rows=20002, cols=20002
    total: nonzeros=120004, allocated nonzeros=120004
    total number of mallocs used during MatSetValues calls =0
      using I-node (on process 0) routines: found 2501 nodes, limit used is 5
************************************************************************************************************************
***             WIDEN YOUR WINDOW TO 120 CHARACTERS.  Use 'enscript -r -fCourier9' to print this document            ***
************************************************************************************************************************

---------------------------------------------- PETSc Performance Summary: ----------------------------------------------



      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


./parallel on a arch-linux2-c-tau named arya with 4 processors, by kanikas Tue Mar 28 22:36:18 2017
Using Petsc Development GIT revision: v3.7.5-3275-g86807ec  GIT Date: 2017-03-09 18:20:42 -0600

                         Max       Max/Min        Avg      Total 
Time (sec):           1.987e-01      1.00060   1.986e-01
Objects:              3.700e+01      1.00000   3.700e+01
Flop:                 8.725e+05      1.00023   8.724e+05  3.490e+06
Flop/sec:            4.395e+06      1.00065   4.393e+06  1.757e+07
Memory:               1.986e+06      1.04308              7.701e+06
MPI Messages:         1.550e+01      1.82353   1.275e+01  5.100e+01
MPI Message Lengths:  5.702e+05      2.99972   2.237e+04  1.141e+06
MPI Reductions:       1.030e+02      1.00000

Flop counting convention: 1 flop = 1 real number operation of type (multiply/divide/add/subtract)
                            e.g., VecAXPY() for real vectors of length N --> 2N flop
                            and VecAXPY() for complex vectors of length N --> 8N flop

Summary of Stages:   ----- Time ------  ----- Flop -----  --- Messages ---  -- Message Lengths --  -- Reductions --
                        Avg     %Total     Avg     %Total   counts   %Total     Avg         %Total   counts   %Total 
 0:      Main Stage: 1.9830e-01  99.8%  3.4898e+06 100.0%  5.100e+01 100.0%  2.237e+04      100.0%  1.010e+02  98.1% 

------------------------------------------------------------------------------------------------------------------------
See the 'Profiling' chapter of the users' manual for details on interpreting output.
Phase summary info:
   Count: number of times phase was executed
   Time and Flop: Max - maximum over all processors
                   Ratio - ratio of maximum to minimum over all processors
   Mess: number of messages sent
   Avg. len: average message length (bytes)
   Reduct: number of global reductions
   Global: entire computation
   Stage: stages of a computation. Set stages with PetscLogStagePush() and PetscLogStagePop().
      %T - percent time in this phase         %F - percent flop in this phase
      %M - percent messages in this phase     %L - percent message lengths in this phase
      %R - percent reductions in this phase
   Total Mflop/s: 10e-6 * (sum of flop over all processors)/(max time over all processors)
------------------------------------------------------------------------------------------------------------------------


      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


Event                Count      Time (sec)     Flop                             --- Global ---  --- Stage ---   Total
                   Max Ratio  Max     Ratio   Max  Ratio  Mess   Avg len Reduct  %T %F %M %L %R  %T %F %M %L %R Mflop/s
------------------------------------------------------------------------------------------------------------------------

--- Event Stage 0: Main Stage

MatMult                5 1.0 2.4812e-03 1.3 2.75e+05 1.0 3.0e+01 1.9e+01 0.0e+00  1 32 59  0  0   1 32 59  0  0   443
MatSolve               5 1.0 6.1893e-04 1.4 2.75e+05 1.0 0.0e+00 0.0e+00 0.0e+00  0 32  0  0  0   0 32  0  0  0  1777
MatLUFactorNum         1 1.0 2.9870e-02 1.3 8.25e+04 1.0 0.0e+00 0.0e+00 0.0e+00 14  9  0  0  0  14  9  0  0  0    11
MatILUFactorSym        1 1.0 9.3791e-03 1.4 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  4  0  0  0  0   4  0  0  0  0     0
MatAssemblyBegin       1 1.0 6.0518e-03 6.7 0.00e+00 0.0 0.0e+00 0.0e+00 4.0e+00  2  0  0  0  4   2  0  0  0  4     0
MatAssemblyEnd         1 1.0 3.0034e-02 1.0 0.00e+00 0.0 1.2e+01 6.7e+00 2.3e+01 15  0 24  0 22  15  0 24  0 23     0
MatGetRowIJ            1 1.0 2.3961e-04 1.5 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
MatGetOrdering         1 1.0 1.7457e-02 1.4 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  8  0  0  0  0   8  0  0  0  0     0
MatLoad                1 1.0 5.3054e-02 1.0 0.00e+00 0.0 2.1e+01 5.4e+04 3.8e+01 27  0 41100 37  27  0 41100 38     0
MatView                6 3.0 3.0155e-03 2.0 0.00e+00 0.0 0.0e+00 0.0e+00 4.0e+00  1  0  0  0  4   1  0  0  0  4     0
VecDot                 4 1.0 1.1148e-03 1.3 4.00e+04 1.0 0.0e+00 0.0e+00 8.0e+00  0  5  0  0  8   0  5  0  0  8   144
VecNorm                4 1.0 1.2398e-03 2.8 4.00e+04 1.0 0.0e+00 0.0e+00 8.0e+00  0  5  0  0  8   0  5  0  0  8   129
VecCopy                5 1.0 3.4165e-04 1.3 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecSet                 9 1.0 8.5616e-04 1.5 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecAXPY                8 1.0 4.0698e-04 1.2 8.00e+04 1.0 0.0e+00 0.0e+00 0.0e+00  0  9  0  0  0   0  9  0  0  0   786
VecAYPX                4 1.0 1.5044e-04 1.3 3.00e+04 1.0 0.0e+00 0.0e+00 0.0e+00  0  3  0  0  0   0  3  0  0  0   798
VecWAXPY               6 1.0 2.7275e-04 1.4 5.00e+04 1.0 0.0e+00 0.0e+00 0.0e+00  0  6  0  0  0   0  6  0  0  0   733
VecScatterBegin        5 1.0 5.2643e-04 1.2 0.00e+00 0.0 3.0e+01 1.9e+01 0.0e+00  0  0 59  0  0   0  0 59  0  0     0
VecScatterEnd          5 1.0 3.3188e-04 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
KSPSetUp               2 1.0 3.2847e-03 1.5 0.00e+00 0.0 0.0e+00 0.0e+00 5.0e+00  1  0  0  0  5   1  0  0  0  5     0
KSPSolve               1 1.0 2.8218e-02 2.5 7.15e+05 1.0 2.4e+01 1.9e+01 3.3e+01  8 82 47  0 32   8 82 47  0 33   101
PCSetUp                2 1.0 6.4328e-02 1.3 8.25e+04 1.0 0.0e+00 0.0e+00 0.0e+00 30  9  0  0  0  30  9  0  0  0     5
PCSetUpOnBlocks        2 1.0 6.0678e-02 1.3 8.25e+04 1.0 0.0e+00 0.0e+00 0.0e+00 28  9  0  0  0  29  9  0  0  0     5
PCApply                5 1.0 3.9883e-03 1.4 2.75e+05 1.0 0.0e+00 0.0e+00 0.0e+00  2 32  0  0  0   2 32  0  0  0   276
------------------------------------------------------------------------------------------------------------------------

Memory usage is given in bytes:

Object Type          Creations   Destructions     Memory  Descendants' Mem.
Reports information only for process 0.

--- Event Stage 0: Main Stage

              Viewer     4              3         2480     0.
              Matrix     4              0            0     0.
              Vector    17              2        43304     0.
      Vector Scatter     1              0            0     0.
           Index Set     7              4        13152     0.
       Krylov Solver     2              0            0     0.
      Preconditioner     2              0            0     0.
========================================================================================================================
Average time to get PetscTime(): 6.19888e-07
Average time for MPI_Barrier(): 2.28882e-06
Average time for zero size MPI_Send(): 2.86698e-05
#PETSc Option Table entries:
-f /home/users/kanikas/MyProjects/PerfomanceModeling/direct_order6_test_60_6_1.mat
-ksp_type tfqmr
-log_summary
-pc_type bjacobi
#End of PETSc Option Table entries
Compiled without FORTRAN kernels
Compiled with full precision matrices (default)
sizeof(short) 2 sizeof(int) 4 sizeof(long) 8 sizeof(void*) 8 sizeof(PetscScalar) 8 sizeof(PetscInt) 4
Configure options: --download-cblaslapack=1 --with-ssl=0 --with-debugging=yes --with-pic=1 --with-shared-libraries=1 CFLAGS="-fPIC -fopenmp -O3 -g" CXXFLAGS="-fPIC -fopenmp -O3 -g" --with-mpi-dir=/usr/local/packages/mpich/3.2/gcc-4.9 --with-fc=0 --with-prefetch=0
-----------------------------------------
Libraries compiled on Sat Mar 11 18:20:27 2017 on arya 
Machine characteristics: Linux-4.4.0-22-generic-x86_64-with-debian-stretch-sid
Using PETSc directory: /disks/large/shared/soft/petsc-git
Using PETSc arch: arch-linux2-c-tau
-----------------------------------------

Using C compiler: /usr/local/packages/mpich/3.2/gcc-4.9/bin/mpicc -fPIC -fopenmp -O3 -g    ${COPTFLAGS} ${CFLAGS}
-----------------------------------------

Using include paths: -I/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/include -I/disks/large/shared/soft/petsc-git/include -I/disks/large/shared/soft/petsc-git/include -I/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/include -I/usr/local/packages/mpich/3.2/gcc-4.9/include
-----------------------------------------

Using C linker: /usr/local/packages/mpich/3.2/gcc-4.9/bin/mpicc
Using libraries: -Wl,-rpath,/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/lib -L/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/lib -lpetsc -llapack -lblas -lX11 -lm -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -L/usr/local/packages/mpich/3.2/gcc-4.9/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/4.8 -L/usr/lib/gcc/x86_64-linux-gnu/4.8 -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -Wl,-rpath,/lib/x86_64-linux-gnu -L/lib/x86_64-linux-gnu -lmpicxx -lstdc++ -lm -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -L/usr/local/packages/mpich/3.2/gcc-4.9/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/4.8 -L/usr/lib/gcc/x86_64-linux-gnu/4.8 -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -Wl,-rpath,/lib/x86_64-linux-gnu -L/lib/x86_64-linux-gnu -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -ldl -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -lmpi -lgomp -lgcc_s -lpthread -ldl 
-----------------------------------------



      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################




 WARNING:   -log_summary is being deprecated; switch to -log_view


************************************************************************************************************************
***             WIDEN YOUR WINDOW TO 120 CHARACTERS.  Use 'enscript -r -fCourier9' to print this document            ***
************************************************************************************************************************

---------------------------------------------- PETSc Performance Summary: ----------------------------------------------



      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


./parallel on a arch-linux2-c-tau named arya with 4 processors, by kanikas Tue Mar 28 22:36:18 2017
Using Petsc Development GIT revision: v3.7.5-3275-g86807ec  GIT Date: 2017-03-09 18:20:42 -0600

                         Max       Max/Min        Avg      Total 
Time (sec):           2.143e-01      1.00009   2.143e-01
Objects:              3.700e+01      1.00000   3.700e+01
Flop:                 8.725e+05      1.00023   8.724e+05  3.490e+06
Flop/sec:            4.071e+06      1.00017   4.070e+06  1.628e+07
Memory:               1.986e+06      1.04308              7.701e+06
MPI Messages:         1.750e+01      1.66667   1.525e+01  6.100e+01
MPI Message Lengths:  5.702e+05      2.99972   1.870e+04  1.141e+06
MPI Reductions:       2.173e+03      1.00000

Flop counting convention: 1 flop = 1 real number operation of type (multiply/divide/add/subtract)
                            e.g., VecAXPY() for real vectors of length N --> 2N flop
                            and VecAXPY() for complex vectors of length N --> 8N flop

Summary of Stages:   ----- Time ------  ----- Flop -----  --- Messages ---  -- Message Lengths --  -- Reductions --
                        Avg     %Total     Avg     %Total   counts   %Total     Avg         %Total   counts   %Total 
 0:      Main Stage: 2.0448e-01  95.4%  3.4898e+06 100.0%  5.700e+01  93.4%  1.870e+04      100.0%  1.030e+02   4.7% 

------------------------------------------------------------------------------------------------------------------------
See the 'Profiling' chapter of the users' manual for details on interpreting output.
Phase summary info:
   Count: number of times phase was executed
   Time and Flop: Max - maximum over all processors
                   Ratio - ratio of maximum to minimum over all processors
   Mess: number of messages sent
   Avg. len: average message length (bytes)
   Reduct: number of global reductions
   Global: entire computation
   Stage: stages of a computation. Set stages with PetscLogStagePush() and PetscLogStagePop().
      %T - percent time in this phase         %F - percent flop in this phase
      %M - percent messages in this phase     %L - percent message lengths in this phase
      %R - percent reductions in this phase
   Total Mflop/s: 10e-6 * (sum of flop over all processors)/(max time over all processors)
------------------------------------------------------------------------------------------------------------------------


      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


Event                Count      Time (sec)     Flop                             --- Global ---  --- Stage ---   Total
                   Max Ratio  Max     Ratio   Max  Ratio  Mess   Avg len Reduct  %T %F %M %L %R  %T %F %M %L %R Mflop/s
------------------------------------------------------------------------------------------------------------------------

--- Event Stage 0: Main Stage

MatMult                5 1.0 2.4812e-03 1.3 2.75e+05 1.0 3.0e+01 1.9e+01 0.0e+00  1 32 49  0  0   1 32 53  0  0   443
MatSolve               5 1.0 6.1893e-04 1.4 2.75e+05 1.0 0.0e+00 0.0e+00 0.0e+00  0 32  0  0  0   0 32  0  0  0  1777
MatLUFactorNum         1 1.0 2.9870e-02 1.3 8.25e+04 1.0 0.0e+00 0.0e+00 0.0e+00 13  9  0  0  0  14  9  0  0  0    11
MatILUFactorSym        1 1.0 9.3791e-03 1.4 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  4  0  0  0  0   4  0  0  0  0     0
MatAssemblyBegin       1 1.0 6.0518e-03 6.7 0.00e+00 0.0 0.0e+00 0.0e+00 4.0e+00  1  0  0  0  0   2  0  0  0  4     0
MatAssemblyEnd         1 1.0 3.0034e-02 1.0 0.00e+00 0.0 1.2e+01 6.7e+00 2.3e+01 14  0 20  0  1  15  0 21  0 22     0
MatGetRowIJ            1 1.0 2.3961e-04 1.5 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
MatGetOrdering         1 1.0 1.7457e-02 1.4 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  7  0  0  0  0   8  0  0  0  0     0
MatLoad                1 1.0 5.3054e-02 1.0 0.00e+00 0.0 2.1e+01 5.4e+04 3.8e+01 25  0 34100  2  26  0 37100 37     0
MatView                6 3.0 3.0155e-03 2.0 0.00e+00 0.0 0.0e+00 0.0e+00 4.0e+00  1  0  0  0  0   1  0  0  0  4     0
VecDot                 4 1.0 1.1148e-03 1.3 4.00e+04 1.0 0.0e+00 0.0e+00 8.0e+00  0  5  0  0  0   0  5  0  0  8   144
VecNorm                4 1.0 1.2398e-03 2.8 4.00e+04 1.0 0.0e+00 0.0e+00 8.0e+00  0  5  0  0  0   0  5  0  0  8   129
VecCopy                5 1.0 3.4165e-04 1.3 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecSet                 9 1.0 8.5616e-04 1.5 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecAXPY                8 1.0 4.0698e-04 1.2 8.00e+04 1.0 0.0e+00 0.0e+00 0.0e+00  0  9  0  0  0   0  9  0  0  0   786
VecAYPX                4 1.0 1.5044e-04 1.3 3.00e+04 1.0 0.0e+00 0.0e+00 0.0e+00  0  3  0  0  0   0  3  0  0  0   798
VecWAXPY               6 1.0 2.7275e-04 1.4 5.00e+04 1.0 0.0e+00 0.0e+00 0.0e+00  0  6  0  0  0   0  6  0  0  0   733
VecScatterBegin        5 1.0 5.2643e-04 1.2 0.00e+00 0.0 3.0e+01 1.9e+01 0.0e+00  0  0 49  0  0   0  0 53  0  0     0
VecScatterEnd          5 1.0 3.3188e-04 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
KSPSetUp               2 1.0 3.2847e-03 1.5 0.00e+00 0.0 0.0e+00 0.0e+00 5.0e+00  1  0  0  0  0   1  0  0  0  5     0
KSPSolve               1 1.0 2.8218e-02 2.5 7.15e+05 1.0 2.4e+01 1.9e+01 3.3e+01  7 82 39  0  2   8 82 42  0 32   101
PCSetUp                2 1.0 6.4328e-02 1.3 8.25e+04 1.0 0.0e+00 0.0e+00 0.0e+00 28  9  0  0  0  29  9  0  0  0     5
PCSetUpOnBlocks        2 1.0 6.0678e-02 1.3 8.25e+04 1.0 0.0e+00 0.0e+00 0.0e+00 26  9  0  0  0  28  9  0  0  0     5
PCApply                5 1.0 3.9883e-03 1.4 2.75e+05 1.0 0.0e+00 0.0e+00 0.0e+00  2 32  0  0  0   2 32  0  0  0   276
------------------------------------------------------------------------------------------------------------------------

Memory usage is given in bytes:

Object Type          Creations   Destructions     Memory  Descendants' Mem.
Reports information only for process 0.

--- Event Stage 0: Main Stage

              Viewer     4              3         2480     0.
              Matrix     4              1       443132     0.
              Vector    17             16       546232     0.
      Vector Scatter     1              0            0     0.
           Index Set     7              7        75516     0.
       Krylov Solver     2              2         2336     0.
      Preconditioner     2              2         1896     0.
========================================================================================================================
Average time to get PetscTime(): 6.19888e-07
Average time for MPI_Barrier(): 6.10352e-06
Average time for zero size MPI_Send(): 1.00136e-05
#PETSc Option Table entries:
-f /home/users/kanikas/MyProjects/PerfomanceModeling/direct_order6_test_60_6_1.mat
-ksp_type tfqmr
-log_summary
-pc_type bjacobi
#End of PETSc Option Table entries
Compiled without FORTRAN kernels
Compiled with full precision matrices (default)
sizeof(short) 2 sizeof(int) 4 sizeof(long) 8 sizeof(void*) 8 sizeof(PetscScalar) 8 sizeof(PetscInt) 4
Configure options: --download-cblaslapack=1 --with-ssl=0 --with-debugging=yes --with-pic=1 --with-shared-libraries=1 CFLAGS="-fPIC -fopenmp -O3 -g" CXXFLAGS="-fPIC -fopenmp -O3 -g" --with-mpi-dir=/usr/local/packages/mpich/3.2/gcc-4.9 --with-fc=0 --with-prefetch=0
-----------------------------------------
Libraries compiled on Sat Mar 11 18:20:27 2017 on arya 
Machine characteristics: Linux-4.4.0-22-generic-x86_64-with-debian-stretch-sid
Using PETSc directory: /disks/large/shared/soft/petsc-git
Using PETSc arch: arch-linux2-c-tau
-----------------------------------------

Using C compiler: /usr/local/packages/mpich/3.2/gcc-4.9/bin/mpicc -fPIC -fopenmp -O3 -g    ${COPTFLAGS} ${CFLAGS}
-----------------------------------------

Using include paths: -I/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/include -I/disks/large/shared/soft/petsc-git/include -I/disks/large/shared/soft/petsc-git/include -I/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/include -I/usr/local/packages/mpich/3.2/gcc-4.9/include
-----------------------------------------

Using C linker: /usr/local/packages/mpich/3.2/gcc-4.9/bin/mpicc
Using libraries: -Wl,-rpath,/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/lib -L/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/lib -lpetsc -llapack -lblas -lX11 -lm -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -L/usr/local/packages/mpich/3.2/gcc-4.9/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/4.8 -L/usr/lib/gcc/x86_64-linux-gnu/4.8 -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -Wl,-rpath,/lib/x86_64-linux-gnu -L/lib/x86_64-linux-gnu -lmpicxx -lstdc++ -lm -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -L/usr/local/packages/mpich/3.2/gcc-4.9/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/4.8 -L/usr/lib/gcc/x86_64-linux-gnu/4.8 -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -Wl,-rpath,/lib/x86_64-linux-gnu -L/lib/x86_64-linux-gnu -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -ldl -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -lmpi -lgomp -lgcc_s -lpthread -ldl 
-----------------------------------------



      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


