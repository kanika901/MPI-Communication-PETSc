Must indicate log file name with -logfile optionHash: nohash
gmres | jacobi | reason=2 | time=1.526570e-02 | norm=0.000683421 | its=8
KSP Object: 4 MPI processes
  type: gmres
    GMRES: restart=30, using Classical (unmodified) Gram-Schmidt Orthogonalization with no iterative refinement
    GMRES: happy breakdown tolerance 1e-30
  maximum iterations=10000, initial guess is zero
  tolerances:  relative=1e-05, absolute=1e-50, divergence=10000.
  left preconditioning
  using PRECONDITIONED norm type for convergence test
PC Object: 4 MPI processes
  type: jacobi
  linear system matrix = precond matrix:
  Mat Object: 4 MPI processes
    type: mpiaij
    rows=20002, cols=20002
    total: nonzeros=120004, allocated nonzeros=120004
    total number of mallocs used during MatSetValues calls =0
      using I-node (on process 0) routines: found 2501 nodes, limit used is 5
PC Object: 4 MPI processes
  type: jacobi
  linear system matrix = precond matrix:
  Mat Object: 4 MPI processes
    type: mpiaij
    rows=20002, cols=20002
    total: nonzeros=120004, allocated nonzeros=120004
    total number of mallocs used during MatSetValues calls =0
      using I-node (on process 0) routines: found 2501 nodes, limit used is 5
************************************************************************************************************************
***             WIDEN YOUR WINDOW TO 120 CHARACTERS.  Use 'enscript -r -fCourier9' to print this document            ***
************************************************************************************************************************

---------------------------------------------- PETSc Performance Summary: ----------------------------------------------



      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


./parallel on a arch-linux2-c-tau named arya with 4 processors, by kanikas Tue Mar 28 17:34:28 2017
Using Petsc Development GIT revision: v3.7.5-3275-g86807ec  GIT Date: 2017-03-09 18:20:42 -0600

                         Max       Max/Min        Avg      Total 
Time (sec):           1.343e-01      1.00066   1.343e-01
Objects:              3.200e+01      1.00000   3.200e+01
Flop:                 1.505e+06      1.00025   1.505e+06  6.020e+06
Flop/sec:            1.121e+07      1.00051   1.121e+07  4.483e+07
Memory:               1.434e+06      1.00054              5.734e+06
MPI Messages:         2.350e+01      1.88000   1.875e+01  7.500e+01
MPI Message Lengths:  5.702e+05      2.99921   1.521e+04  1.141e+06
MPI Reductions:       1.570e+02      1.00000

Flop counting convention: 1 flop = 1 real number operation of type (multiply/divide/add/subtract)
                            e.g., VecAXPY() for real vectors of length N --> 2N flop
                            and VecAXPY() for complex vectors of length N --> 8N flop

Summary of Stages:   ----- Time ------  ----- Flop -----  --- Messages ---  -- Message Lengths --  -- Reductions --
                        Avg     %Total     Avg     %Total   counts   %Total     Avg         %Total   counts   %Total 
 0:      Main Stage: 1.3401e-01  99.8%  6.0203e+06 100.0%  7.500e+01 100.0%  1.521e+04      100.0%  1.550e+02  98.7% 

------------------------------------------------------------------------------------------------------------------------
See the 'Profiling' chapter of the users' manual for details on interpreting output.
Phase summary info:
   Count: number of times phase was executed
   Time and Flop: Max - maximum over all processors
                   Ratio - ratio of maximum to minimum over all processors
   Mess: number of messages sent
   Avg. len: average message length (bytes)
   Reduct: number of global reductions
   Global: entire computation
   Stage: stages of a computation. Set stages with PetscLogStagePush() and PetscLogStagePop().
      %T - percent time in this phase         %F - percent flop in this phase
      %M - percent messages in this phase     %L - percent message lengths in this phase
      %R - percent reductions in this phase
   Total Mflop/s: 10e-6 * (sum of flop over all processors)/(max time over all processors)
------------------------------------------------------------------------------------------------------------------------


      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


Event                Count      Time (sec)     Flop                             --- Global ---  --- Stage ---   Total
                   Max Ratio  Max     Ratio   Max  Ratio  Mess   Avg len Reduct  %T %F %M %L %R  %T %F %M %L %R Mflop/s
------------------------------------------------------------------------------------------------------------------------

--- Event Stage 0: Main Stage

MatMult                9 1.0 3.0682e-03 1.3 4.95e+05 1.0 5.4e+01 1.9e+01 0.0e+00  2 33 72  0  0   2 33 72  0  0   645
MatAssemblyBegin       1 1.0 5.3289e-03 5.8 0.00e+00 0.0 0.0e+00 0.0e+00 4.0e+00  2  0  0  0  3   2  0  0  0  3     0
MatAssemblyEnd         1 1.0 3.0096e-02 1.0 0.00e+00 0.0 1.2e+01 6.7e+00 2.3e+01 22  0 16  0 15  22  0 16  0 15     0
MatLoad                1 1.0 5.6021e-02 1.0 0.00e+00 0.0 2.1e+01 5.4e+04 3.8e+01 42  0 28100 24  42  0 28100 25     0
MatView                2 1.0 1.3218e-03 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 4.0e+00  1  0  0  0  3   1  0  0  0  3     0
VecMDot                8 1.0 2.1138e-03 3.5 3.60e+05 1.0 0.0e+00 0.0e+00 1.6e+01  1 24  0  0 10   1 24  0  0 10   681
VecNorm               10 1.0 1.2896e-03 1.9 1.00e+05 1.0 0.0e+00 0.0e+00 2.0e+01  1  7  0  0 13   1  7  0  0 13   310
VecScale               9 1.0 7.9656e-04 1.3 4.50e+04 1.0 0.0e+00 0.0e+00 0.0e+00  1  3  0  0  0   1  3  0  0  0   226
VecCopy                1 1.0 2.0933e-04 1.5 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecSet                 5 1.0 7.7581e-04 1.6 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecAXPY                2 1.0 1.2398e-04 1.2 2.00e+04 1.0 0.0e+00 0.0e+00 0.0e+00  0  1  0  0  0   0  1  0  0  0   645
VecMAXPY               9 1.0 4.5609e-04 1.4 4.40e+05 1.0 0.0e+00 0.0e+00 0.0e+00  0 29  0  0  0   0 29  0  0  0  3859
VecPointwiseMult       9 1.0 3.2711e-04 1.3 4.50e+04 1.0 0.0e+00 0.0e+00 0.0e+00  0  3  0  0  0   0  3  0  0  0   550
VecScatterBegin        9 1.0 6.0582e-04 1.3 0.00e+00 0.0 5.4e+01 1.9e+01 0.0e+00  0  0 72  0  0   0  0 72  0  0     0
VecScatterEnd          9 1.0 4.6015e-04 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecNormalize           9 1.0 2.1932e-03 1.2 1.35e+05 1.0 0.0e+00 0.0e+00 1.8e+01  1  9  0  0 11   1  9  0  0 12   246
KSPGMRESOrthog         8 1.0 3.0801e-03 1.8 7.20e+05 1.0 0.0e+00 0.0e+00 5.2e+01  2 48  0  0 33   2 48  0  0 34   935
KSPSetUp               1 1.0 2.7964e-03 1.8 0.00e+00 0.0 0.0e+00 0.0e+00 5.0e+00  2  0  0  0  3   2  0  0  0  3     0
KSPSolve               1 1.0 1.4116e-02 1.0 1.43e+06 1.0 4.8e+01 1.9e+01 8.7e+01 10 95 64  0 55  10 95 64  0 56   405
PCSetUp                1 1.0 3.9816e-05 1.3 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
PCApply                9 1.0 2.5325e-03 1.1 4.50e+04 1.0 0.0e+00 0.0e+00 6.0e+00  2  3  0  0  4   2  3  0  0  4    71
------------------------------------------------------------------------------------------------------------------------

Memory usage is given in bytes:

Object Type          Creations   Destructions     Memory  Descendants' Mem.
Reports information only for process 0.

--- Event Stage 0: Main Stage

              Viewer     2              1          816     0.
              Matrix     3              0            0     0.
              Vector    22              2        43304     0.
      Vector Scatter     1              0            0     0.
           Index Set     2              2         1580     0.
       Krylov Solver     1              0            0     0.
      Preconditioner     1              0            0     0.
========================================================================================================================
Average time to get PetscTime(): 6.19888e-07
Average time for MPI_Barrier(): 2.28882e-06
Average time for zero size MPI_Send(): 2.96235e-05
#PETSc Option Table entries:
-f /home/users/kanikas/MyProjects/PerfomanceModeling/direct_order6_test_60_6_1.mat
-ksp_type gmres
-log_summary
-pc_type jacobi
#End of PETSc Option Table entries
Compiled without FORTRAN kernels
Compiled with full precision matrices (default)
sizeof(short) 2 sizeof(int) 4 sizeof(long) 8 sizeof(void*) 8 sizeof(PetscScalar) 8 sizeof(PetscInt) 4
Configure options: --download-cblaslapack=1 --with-ssl=0 --with-debugging=yes --with-pic=1 --with-shared-libraries=1 CFLAGS="-fPIC -fopenmp -O3 -g" CXXFLAGS="-fPIC -fopenmp -O3 -g" --with-mpi-dir=/usr/local/packages/mpich/3.2/gcc-4.9 --with-fc=0 --with-prefetch=0
-----------------------------------------
Libraries compiled on Sat Mar 11 18:20:27 2017 on arya 
Machine characteristics: Linux-4.4.0-22-generic-x86_64-with-debian-stretch-sid
Using PETSc directory: /disks/large/shared/soft/petsc-git
Using PETSc arch: arch-linux2-c-tau
-----------------------------------------

Using C compiler: /usr/local/packages/mpich/3.2/gcc-4.9/bin/mpicc -fPIC -fopenmp -O3 -g    ${COPTFLAGS} ${CFLAGS}
-----------------------------------------

Using include paths: -I/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/include -I/disks/large/shared/soft/petsc-git/include -I/disks/large/shared/soft/petsc-git/include -I/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/include -I/usr/local/packages/mpich/3.2/gcc-4.9/include
-----------------------------------------

Using C linker: /usr/local/packages/mpich/3.2/gcc-4.9/bin/mpicc
Using libraries: -Wl,-rpath,/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/lib -L/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/lib -lpetsc -llapack -lblas -lX11 -lm -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -L/usr/local/packages/mpich/3.2/gcc-4.9/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/4.8 -L/usr/lib/gcc/x86_64-linux-gnu/4.8 -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -Wl,-rpath,/lib/x86_64-linux-gnu -L/lib/x86_64-linux-gnu -lmpicxx -lstdc++ -lm -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -L/usr/local/packages/mpich/3.2/gcc-4.9/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/4.8 -L/usr/lib/gcc/x86_64-linux-gnu/4.8 -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -Wl,-rpath,/lib/x86_64-linux-gnu -L/lib/x86_64-linux-gnu -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -ldl -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -lmpi -lgomp -lgcc_s -lpthread -ldl 
-----------------------------------------



      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################




 WARNING:   -log_summary is being deprecated; switch to -log_view


************************************************************************************************************************
***             WIDEN YOUR WINDOW TO 120 CHARACTERS.  Use 'enscript -r -fCourier9' to print this document            ***
************************************************************************************************************************

---------------------------------------------- PETSc Performance Summary: ----------------------------------------------



      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


./parallel on a arch-linux2-c-tau named arya with 4 processors, by kanikas Tue Mar 28 17:34:28 2017
Using Petsc Development GIT revision: v3.7.5-3275-g86807ec  GIT Date: 2017-03-09 18:20:42 -0600

                         Max       Max/Min        Avg      Total 
Time (sec):           1.495e-01      1.00022   1.495e-01
Objects:              3.200e+01      1.00000   3.200e+01
Flop:                 1.505e+06      1.00025   1.505e+06  6.020e+06
Flop/sec:            1.007e+07      1.00045   1.007e+07  4.028e+07
Memory:               1.434e+06      1.00054              5.734e+06
MPI Messages:         2.450e+01      1.81481   1.975e+01  7.900e+01
MPI Message Lengths:  5.702e+05      2.99921   1.444e+04  1.141e+06
MPI Reductions:       2.227e+03      1.00000

Flop counting convention: 1 flop = 1 real number operation of type (multiply/divide/add/subtract)
                            e.g., VecAXPY() for real vectors of length N --> 2N flop
                            and VecAXPY() for complex vectors of length N --> 8N flop

Summary of Stages:   ----- Time ------  ----- Flop -----  --- Messages ---  -- Message Lengths --  -- Reductions --
                        Avg     %Total     Avg     %Total   counts   %Total     Avg         %Total   counts   %Total 
 0:      Main Stage: 1.3976e-01  93.5%  6.0203e+06 100.0%  7.500e+01  94.9%  1.444e+04      100.0%  1.570e+02   7.0% 

------------------------------------------------------------------------------------------------------------------------
See the 'Profiling' chapter of the users' manual for details on interpreting output.
Phase summary info:
   Count: number of times phase was executed
   Time and Flop: Max - maximum over all processors
                   Ratio - ratio of maximum to minimum over all processors
   Mess: number of messages sent
   Avg. len: average message length (bytes)
   Reduct: number of global reductions
   Global: entire computation
   Stage: stages of a computation. Set stages with PetscLogStagePush() and PetscLogStagePop().
      %T - percent time in this phase         %F - percent flop in this phase
      %M - percent messages in this phase     %L - percent message lengths in this phase
      %R - percent reductions in this phase
   Total Mflop/s: 10e-6 * (sum of flop over all processors)/(max time over all processors)
------------------------------------------------------------------------------------------------------------------------


      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


Event                Count      Time (sec)     Flop                             --- Global ---  --- Stage ---   Total
                   Max Ratio  Max     Ratio   Max  Ratio  Mess   Avg len Reduct  %T %F %M %L %R  %T %F %M %L %R Mflop/s
------------------------------------------------------------------------------------------------------------------------

--- Event Stage 0: Main Stage

MatMult                9 1.0 3.0682e-03 1.3 4.95e+05 1.0 5.4e+01 1.9e+01 0.0e+00  2 33 68  0  0   2 33 72  0  0   645
MatAssemblyBegin       1 1.0 5.3289e-03 5.8 0.00e+00 0.0 0.0e+00 0.0e+00 4.0e+00  2  0  0  0  0   2  0  0  0  3     0
MatAssemblyEnd         1 1.0 3.0096e-02 1.0 0.00e+00 0.0 1.2e+01 6.7e+00 2.3e+01 20  0 15  0  1  21  0 16  0 15     0
MatLoad                1 1.0 5.6021e-02 1.0 0.00e+00 0.0 2.1e+01 5.4e+04 3.8e+01 37  0 27100  2  40  0 28100 24     0
MatView                2 1.0 1.3218e-03 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 4.0e+00  1  0  0  0  0   1  0  0  0  3     0
VecMDot                8 1.0 2.1138e-03 3.5 3.60e+05 1.0 0.0e+00 0.0e+00 1.6e+01  1 24  0  0  1   1 24  0  0 10   681
VecNorm               10 1.0 1.2896e-03 1.9 1.00e+05 1.0 0.0e+00 0.0e+00 2.0e+01  1  7  0  0  1   1  7  0  0 13   310
VecScale               9 1.0 7.9656e-04 1.3 4.50e+04 1.0 0.0e+00 0.0e+00 0.0e+00  0  3  0  0  0   1  3  0  0  0   226
VecCopy                1 1.0 2.0933e-04 1.5 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecSet                 5 1.0 7.7581e-04 1.6 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecAXPY                2 1.0 1.2398e-04 1.2 2.00e+04 1.0 0.0e+00 0.0e+00 0.0e+00  0  1  0  0  0   0  1  0  0  0   645
VecMAXPY               9 1.0 4.5609e-04 1.4 4.40e+05 1.0 0.0e+00 0.0e+00 0.0e+00  0 29  0  0  0   0 29  0  0  0  3859
VecPointwiseMult       9 1.0 3.2711e-04 1.3 4.50e+04 1.0 0.0e+00 0.0e+00 0.0e+00  0  3  0  0  0   0  3  0  0  0   550
VecScatterBegin        9 1.0 6.0582e-04 1.3 0.00e+00 0.0 5.4e+01 1.9e+01 0.0e+00  0  0 68  0  0   0  0 72  0  0     0
VecScatterEnd          9 1.0 4.6015e-04 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecNormalize           9 1.0 2.1932e-03 1.2 1.35e+05 1.0 0.0e+00 0.0e+00 1.8e+01  1  9  0  0  1   1  9  0  0 11   246
KSPGMRESOrthog         8 1.0 3.0801e-03 1.8 7.20e+05 1.0 0.0e+00 0.0e+00 5.2e+01  2 48  0  0  2   2 48  0  0 33   935
KSPSetUp               1 1.0 2.7964e-03 1.8 0.00e+00 0.0 0.0e+00 0.0e+00 5.0e+00  1  0  0  0  0   1  0  0  0  3     0
KSPSolve               1 1.0 1.4116e-02 1.0 1.43e+06 1.0 4.8e+01 1.9e+01 8.7e+01  9 95 61  0  4  10 95 64  0 55   405
PCSetUp                1 1.0 3.9816e-05 1.3 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
PCApply                9 1.0 2.5325e-03 1.1 4.50e+04 1.0 0.0e+00 0.0e+00 6.0e+00  2  3  0  0  0   2  3  0  0  4    71
------------------------------------------------------------------------------------------------------------------------

Memory usage is given in bytes:

Object Type          Creations   Destructions     Memory  Descendants' Mem.
Reports information only for process 0.

--- Event Stage 0: Main Stage

              Viewer     2              1          816     0.
              Matrix     3              0            0     0.
              Vector    22             21       834768     0.
      Vector Scatter     1              0            0     0.
           Index Set     2              2         1580     0.
       Krylov Solver     1              1        18408     0.
      Preconditioner     1              1          848     0.
========================================================================================================================
Average time to get PetscTime(): 6.19888e-07
Average time for MPI_Barrier(): 2.28882e-06
Average time for zero size MPI_Send(): 7.15256e-06
#PETSc Option Table entries:
-f /home/users/kanikas/MyProjects/PerfomanceModeling/direct_order6_test_60_6_1.mat
-ksp_type gmres
-log_summary
-pc_type jacobi
#End of PETSc Option Table entries
Compiled without FORTRAN kernels
Compiled with full precision matrices (default)
sizeof(short) 2 sizeof(int) 4 sizeof(long) 8 sizeof(void*) 8 sizeof(PetscScalar) 8 sizeof(PetscInt) 4
Configure options: --download-cblaslapack=1 --with-ssl=0 --with-debugging=yes --with-pic=1 --with-shared-libraries=1 CFLAGS="-fPIC -fopenmp -O3 -g" CXXFLAGS="-fPIC -fopenmp -O3 -g" --with-mpi-dir=/usr/local/packages/mpich/3.2/gcc-4.9 --with-fc=0 --with-prefetch=0
-----------------------------------------
Libraries compiled on Sat Mar 11 18:20:27 2017 on arya 
Machine characteristics: Linux-4.4.0-22-generic-x86_64-with-debian-stretch-sid
Using PETSc directory: /disks/large/shared/soft/petsc-git
Using PETSc arch: arch-linux2-c-tau
-----------------------------------------

Using C compiler: /usr/local/packages/mpich/3.2/gcc-4.9/bin/mpicc -fPIC -fopenmp -O3 -g    ${COPTFLAGS} ${CFLAGS}
-----------------------------------------

Using include paths: -I/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/include -I/disks/large/shared/soft/petsc-git/include -I/disks/large/shared/soft/petsc-git/include -I/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/include -I/usr/local/packages/mpich/3.2/gcc-4.9/include
-----------------------------------------

Using C linker: /usr/local/packages/mpich/3.2/gcc-4.9/bin/mpicc
Using libraries: -Wl,-rpath,/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/lib -L/disks/large/shared/soft/petsc-git/arch-linux2-c-tau/lib -lpetsc -llapack -lblas -lX11 -lm -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -L/usr/local/packages/mpich/3.2/gcc-4.9/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/4.8 -L/usr/lib/gcc/x86_64-linux-gnu/4.8 -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -Wl,-rpath,/lib/x86_64-linux-gnu -L/lib/x86_64-linux-gnu -lmpicxx -lstdc++ -lm -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -L/usr/local/packages/mpich/3.2/gcc-4.9/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/4.8 -L/usr/lib/gcc/x86_64-linux-gnu/4.8 -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -Wl,-rpath,/lib/x86_64-linux-gnu -L/lib/x86_64-linux-gnu -Wl,-rpath,/usr/lib/x86_64-linux-gnu -L/usr/lib/x86_64-linux-gnu -ldl -Wl,-rpath,/usr/local/packages/mpich/3.2/gcc-4.9/lib -lmpi -lgomp -lgcc_s -lpthread -ldl 
-----------------------------------------



      ##########################################################
      #                                                        #
      #                          WARNING!!!                    #
      #                                                        #
      #   This code was compiled with a debugging option,      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


